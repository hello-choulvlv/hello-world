/*
  *@instruction:这是一个轻量级的程序语言翻译器,只能对一个语句块进行翻译.包括变量定义,类型检查 
  *@..顺序/选址/循环语句的中间代码的翻译,支持运算符=,|| && !,+-*/%,()，并对运算符进行了优先级的划分
  *@..对表达式,语句的语法错误也给出了详细的分析.
  */
 @note1:对数组寻址也包括其他的常量计算的合并中,对编译时常数计算的优化分为两步,第一步是生成代码
             前，第二个是生成代码时。第一个是显式的，第二个是隐式的，分布在各个数学计算类中
             
  1全程序采用自顶向下的设计方法,在分析表达式的时候逐步消除左递归，各种形式的标识符都有所对应的类
  的实现,但是在这里我们没有显示switch选择语句的翻译,考虑到switch语句的特殊性，我们决定留到最后再
  实现。
  
  2语言类型:类似C语言，但是没有引入指针和结构.只支持基本类型 int ,float ,char,bool ，并且bool类型不能参与
  到数学求值表达式,if,while,do-while语句中的条件运算表达式的类型必须是bool类型，否则会报语法错误。
  
  3我们在语法分析阶段,已经将常量计算尽可能的合并,但是没有针对布尔表达式
  
  4其次对数组的寻址,我们已经尽可能的减少了寻址的次数并将索引为常数的情况作了简化，尽可能的做到最少次数的
     寻址计算
  5对于结构体,我们的目标是每次引用一个成,要做到最多只寻址一次,即使成员在结构体中的嵌套程度很深
  
  6我们不支持const,static修饰符,也不支持条件编译,宏，文件包含
  
  7需要说明的是,每一种非基本类型,任何的类型符号表中只能保存有一种
  
  8:对于任何类型的构造说明:
     @1:基本类型已经实现不用构造
     @2:指针类型,类型+*中间没有空格,比如指向证书的指针为 int*,浮点数指针float*
     @3:数组类型+[数字]+[数字]...,比如二维10*10整数数组:int[10][10]
     @4:指针数组:类型+*+[数字][数字]..,比如指向二维整数指针的10*10数组int*[10][10]
     @5:结构体:struct+@+名字,比如结构体 struct   Alex为struct@Alex
     @6:指向结构体的指针:struct+@+名字+*,比如指向struct  Spax的指针类型:struct@Spax*
     @7:指向函数的指针类型:返回类型*+(+形参类型1,形参类型1,...),比如int*(int,float,char,bool)  void*(bool)
     所有的类型构造,对象统一都在inter/Parser.java genType函数里完成
     
 9:关于编译器的类型声明过程
           在园丁的设计方案中,我们打算绕开C语言的繁琐的声明形式,但是后来发现采用这样的一种形式使得我们无法
     在函数内部包括全局范围内定义指向数组的指针,但是在我们的语法分析中,我们并没有修改这一方案.有兴许的读者
     可以自己尝试着去修正这个方案,以使得所有的C类型声明形式都是统一的一致的.