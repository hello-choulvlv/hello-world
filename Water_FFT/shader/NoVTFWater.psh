/******************CPU-Lock FFT Ocean Water Pixel Shader*************/
#include "WaterPS.h"

;//输入
#define InputTexCoord t0
#define InputEyeVector t1
#define InputTNBRow1 t2
#define InputTNBRow2 t3
#define InputTNBRow3 t4
#define InputTexCoordInteger t5
#define InputVertexNormal t6
#define InputVertexPosition t7


ps.2.0

dcl InputTexCoord	;//TexCoord0
dcl InputEyeVector	;//Eye Vector
dcl InputTNBRow1	;//TNBRow1
dcl InputTNBRow2	;//TNBRow2
dcl InputTNBRow3	;//TNBRow3
dcl InputTexCoordInteger	;//整数TexCoord
dcl InputVertexNormal	;//VertexNormal
dcl InputVertexPosition	;//VertexPosition

dcl_2d TexBaseMap		;//BaseMap
dcl_cube TexEnvMap		;//Env CubeMap
dcl_2d TexFresnelMap		;//FresnelMap
dcl_2d TexNormalMap		;//Normalap


def c10, 0, 0.5, 1, 2
def c11, 1.7f, 5.0f, 0.98f, 16.0					;//散的常量：FresnelCoefScale、FresnelPower、SpecularCoef、SpecularPower

;//SrcAlpha
def c12, 0.94f, 0, 0, 0

;//Get PixelNormal（In Normalmap） to Temp2
/*;//Direct Addressing (Point Filter)
mul Temp1, InputTexCoord, NormalmapWrapNum
texld Temp2, Temp1, TexNormalMap
*/
;//Shader Addressing (Bilinear Filter)到Temp2，这里得到的是规格化法线
mul Temp1, InputTexCoordInteger, NormalmapWrapNum
BILINEAR_TEXLD


;//从Temp2的0～1映射回-1～1，这里得到的是规格化法线
sub Temp2, Temp2, HALF
mul Temp2, Temp2, TWO

;//TNB变换，已经是规格化的了，直接输出到Normal
dp3 Normal.x, Temp2, InputTNBRow1
dp3 Normal.y, Temp2, InputTNBRow2
dp3 Normal.z, Temp2, InputTNBRow3
mov Normal.w, ONE

;//Test Without NormalMap
;//nrm Normal, InputVertexNormal



;//Normalize Input Vector
nrm EyeVector, InputEyeVector
sub rCP, InputVertexPosition, cWaterCentrePos

;//Base Map
texld BaseColor, InputTexCoord, TexBaseMap



;//Reflect Vector，这里计算的东西很多，还有clamp(E dot N)和WaterColor
dp3 Temp1, EyeVector, Normal
mov_sat EdotN, Temp1.x
	;//顺便计算WaterColor
mov Temp2, DeepWaterColor
lrp WaterColor, EdotN, Temp2, ShallowWaterColor
	;//Reflection Vector不需要把dot结果clamp，所以不用clamp(E dot N)
mul Temp1, Temp1, Normal
mad ReflectVector, Temp1, TWO, -EyeVector
	;// CP
mad ReflectVector, rCP, cOneByWaterRadius, ReflectVector


;//Reflection CubeMap
texld ReflectColor, ReflectVector, TexEnvMap

;//Fresnel Coef
texld Temp1, EdotN, TexFresnelMap
mul_sat FresnelCoef, Temp1.x, FresnelCoefScale	;//因为波浪较大，最好再次缩放FresnelCoef

/*
;//Specular
dp3_sat Temp2, ReflectVector, LightSpecularDir

	;//Specular整体差异过大，这里先把它朝0.5～1的范围内聚集一下，再整体缩放，然后再算高光幂
rsq Temp1.x, Temp2.x
rcp Temp2.x, Temp1.x
rsq Temp1.x, Temp2.x
rcp Temp2.x, Temp1.x

mul Temp2.x, Temp2.x, SpecularCoefScale
pow SpecularCoef, Temp2.x, SpecularPower
mad ReflectColor, SpecularCoef, LightSpecularColor, ReflectColor
*/

;//Fresnel Blend
lrp Color, FresnelCoef, ReflectColor, WaterColor	;//得到反射折射的混合颜色

/*
;//Diffuse Coef
dp3 Temp1, Normal, LightDiffuseDir
cmp DiffuseCoef, Temp1.x, Temp1.x, ZERO	;//max(dot, 0)
	;//为了抑制住Diffuse防止它太小，故而开方，开方次数越多，它总体的值越偏向0.5～1
;//rsq Temp1.x, DiffuseCoef
;//rcp DiffuseCoef, Temp1.x

;//Diffuse Lighting
mul Color, Color, LightDiffuseColor
mul Color, Color, DiffuseCoef
*/

;//Output
mov Color.a, SrcAlpha
mov oC0, Color